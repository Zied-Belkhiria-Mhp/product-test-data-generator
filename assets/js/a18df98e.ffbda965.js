"use strict";(self.webpackChunkcatenax_ng=self.webpackChunkcatenax_ng||[]).push([[846],{3905:function(e,t,a){a.d(t,{Zo:function(){return d},kt:function(){return v}});var n=a(7294);function r(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function i(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,n)}return a}function l(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?i(Object(a),!0).forEach((function(t){r(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):i(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function c(e,t){if(null==e)return{};var a,n,r=function(e,t){if(null==e)return{};var a,n,r={},i=Object.keys(e);for(n=0;n<i.length;n++)a=i[n],t.indexOf(a)>=0||(r[a]=e[a]);return r}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(n=0;n<i.length;n++)a=i[n],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(r[a]=e[a])}return r}var o=n.createContext({}),s=function(e){var t=n.useContext(o),a=t;return e&&(a="function"==typeof e?e(t):l(l({},t),e)),a},d=function(e){var t=s(e.components);return n.createElement(o.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},p=n.forwardRef((function(e,t){var a=e.components,r=e.mdxType,i=e.originalType,o=e.parentName,d=c(e,["components","mdxType","originalType","parentName"]),p=s(a),v=r,h=p["".concat(o,".").concat(v)]||p[v]||u[v]||i;return a?n.createElement(h,l(l({ref:t},d),{},{components:a})):n.createElement(h,l({ref:t},d))}));function v(e,t){var a=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var i=a.length,l=new Array(i);l[0]=p;var c={};for(var o in t)hasOwnProperty.call(t,o)&&(c[o]=t[o]);c.originalType=e,c.mdxType="string"==typeof e?e:r,l[1]=c;for(var s=2;s<i;s++)l[s]=a[s];return n.createElement.apply(null,l)}return n.createElement.apply(null,a)}p.displayName="MDXCreateElement"},1056:function(e,t,a){a.r(t),a.d(t,{assets:function(){return d},contentTitle:function(){return o},default:function(){return v},frontMatter:function(){return c},metadata:function(){return s},toc:function(){return u}});var n=a(7462),r=a(3366),i=(a(7294),a(3905)),l=["components"],c={sidebar_position:3,title:"Testdata Scenarios (JavaScript)"},o=void 0,s={unversionedId:"testdata-scenario/java-script",id:"testdata-scenario/java-script",title:"Testdata Scenarios (JavaScript)",description:"Definition",source:"@site/docs/testdata-scenario/java-script.md",sourceDirName:"testdata-scenario",slug:"/testdata-scenario/java-script",permalink:"/product-test-data-generator/docs/testdata-scenario/java-script",editUrl:"https://github.com/catenax-ng/product-test-data-generator/edit/main/docs/testdata-scenario/java-script.md",tags:[],version:"current",sidebarPosition:3,frontMatter:{sidebar_position:3,title:"Testdata Scenarios (JavaScript)"},sidebar:"tutorialSidebar",previous:{title:"Domain Specific Language (DSL)",permalink:"/product-test-data-generator/docs/testdata-scenario/DSL"},next:{title:"Vehicle Blueprint (json)",permalink:"/product-test-data-generator/docs/testdata-scenario/vehicle-template"}},d={},u=[{value:"Definition",id:"definition",level:2},{value:"Important variables",id:"important-variables",level:2},{value:"Examples",id:"examples",level:2},{value:"Generic Structure Example",id:"generic-structure-example",level:3},{value:"Vehicle Blueprint",id:"vehicle-blueprint",level:3}],p={toc:u};function v(e){var t=e.components,a=(0,r.Z)(e,l);return(0,i.kt)("wrapper",(0,n.Z)({},p,a,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("h2",{id:"definition"},"Definition"),(0,i.kt)("p",null,"This allows you to freely define a testdata scenario as javascript. Any generated instances (plain or with template) are automatically added to the output."),(0,i.kt)("h2",{id:"important-variables"},"Important variables"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("em",{parentName:"li"},"scenario"),": generate instances from meta models and templates ",(0,i.kt)("a",{parentName:"li",href:"https://catenax-ng.github.io/product-test-data-generator/javadoc/tdg/doc/com/catenax/tdm/scenario/TestDataScenarioFactory.html"},"JavaDoc")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("em",{parentName:"li"},"rand"),": generate random strings / numbers ",(0,i.kt)("a",{parentName:"li",href:"https://catenax-ng.github.io/product-test-data-generator/javadoc/tdg/doc/com/catenax/tdm/testdata/TestDataFactory.html"},"JavaDoc")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("em",{parentName:"li"},"log"),": Standard logger for the component")),(0,i.kt)("h2",{id:"examples"},"Examples"),(0,i.kt)("p",null,"The following examples show how to use the javascript method and you can use them to re-use the methods called in those examples to build your own testdata examples."),(0,i.kt)("h3",{id:"generic-structure-example"},"Generic Structure Example"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-javascript"},"// javascript \n// Name: cetest\n// Version: 1.0\n\nscenario.setAutoAddTestdata(false);\n\nvar BusinessPartner = scenario.getSchema('BPDM', '1.1.0');\n// var bmw = scenario.generateTestData(BusinessPartner, 'bp_bmw', '1.0');\n\n// var Traceability = scenario.getSchema('Traceability', '0.1.1');\nvar SerialPartTypization = scenario.getSchema('SerialPartTypization', '1.0.0');\nvar AssemblyPartRelationship = scenario.getSchema('AssemblyPartRelationship', '1.0.0');\n// var Material = scenario.getSchema('Material', '0.1.1');\n// var TechnicalData = scenario.getSchema('TechnicalData', '0.1.1');\n\nvar ProductDescription = scenario.getSchema('ProductDescription', '1.0.0');\nvar MaterialForRecycling = scenario.getSchema('MaterialForRecycling', '1.0.0');\n\nvar cellUuid = rand.getUuid();\n\nvar vehicleQuantity = 10;\nvar hvbQuantity = 1;\nvar moduleQuantity  = 6;\nvar cellQuantity    = 10;\n\nfor(var i = 0; i < vehicleQuantity; i++) {\n        var spr_vehicle = scenario.generateTestData(SerialPartTypization, 'spt_vehicle', '1.0');\n\n        var van = rand.getVan();\n        spr_vehicle.get('localIdentifiers').get(2).put('value', van);\n        spr_vehicle.get('localIdentifiers').get(3).put('value', van);\n\n        var uuid = rand.getUuid();\n        spr_vehicle.put('catenaXId', uuid);\n        var apr_vehicle = scenario.generateTestData(AssemblyPartRelationship, 'apr', '1.0');\n        apr_vehicle.put('catenaXId', spr_vehicle.get('catenaXId'));\n        \n        var moduleChild = apr_vehicle.get('childParts').get(0);\n        apr_vehicle.get('childParts').remove(0);\n        \n        var pd_vehicle = scenario.generateTestData(ProductDescription);\n        var mf_vehicle = scenario.generateTestData(MaterialForRecycling);\n        \n        var con_vehicle = scenario.generateTestDataContainer(uuid);\n        scenario.addToContainer(con_vehicle, apr_vehicle, AssemblyPartRelationship);\n        scenario.addToContainer(con_vehicle, spr_vehicle, SerialPartTypization);\n\n        for(var h = 0; h < hvbQuantity; h++) {\n            var hvbUuid = rand.getUuid();\n            var hvbSerialNo = rand.getSerialNoAlphaNum(28);\n            \n            var moduleChildInst = cloneElement(moduleChild);\n            moduleChildInst.put('childCatenaXId', hvbUuid);\n            apr_vehicle.get('childParts').put(moduleChildInst);\n            \n            var spr_hvb = scenario.generateTestData(SerialPartTypization, 'spt_hvb', '1.0');\n            var apr_hvb = scenario.generateTestData(AssemblyPartRelationship, 'apr', '1.0');\n        \n            spr_hvb.get('localIdentifiers').get(2).put('value', hvbSerialNo);\n        \n            spr_hvb.put('catenaXId', hvbUuid);\n            apr_hvb.put('catenaXId', spr_hvb.get('catenaXId'));\n            // apr_vehicle.get('childParts').get(0).put('childCatenaXId', apr_hvb.get('catenaXId'));\n            \n            apr_hvb.get('childParts').get(0).get('quantity').put('quantityNumber', 1);\n            \n            var hvb_child = apr_hvb.get('childParts').get(0);\n            apr_hvb.get('childParts').remove(0);\n            \n            var pd_hvb = scenario.generateTestData(ProductDescription);\n            var mf_hvb = scenario.generateTestData(MaterialForRecycling);\n            \n            for(var j = 0; j < moduleQuantity; j++) {\n                var cellModuleUuid = rand.getUuid();\n                var cellModuleSerialNo = rand.getSerialNoNum(28);\n            \n                var spr_cellmodule = scenario.generateTestData(SerialPartTypization, 'spt_cellmodule', '1.0');\n                var apr_cellmodule = scenario.generateTestData(AssemblyPartRelationship, 'apr', '1.0');\n                \n                spr_cellmodule.get('localIdentifiers').get(2).put('value', cellModuleSerialNo);\n                \n                spr_cellmodule.put('catenaXId', cellModuleUuid);\n                apr_cellmodule.put('catenaXId', spr_cellmodule.get('catenaXId'));\n                // apr_hvb.get('childParts').get(0).put('childCatenaXId', apr_cellmodule.get('catenaXId'));\n                \n                // apr_cellmodule.get('childParts').get(0).get('quantity').put('quantityNumber', 1);\n                // apr_cellmodule.get('childParts').get(0).put('childCatenaXId', cellUuid);\n\n                var hvb_child_j = cloneElement(hvb_child); // Object.assign({}, hvb_child);\n                hvb_child_j.put('childCatenaXId', cellModuleUuid);\n                apr_hvb.get('childParts').put(hvb_child_j);\n                // apr_hvb.get('childParts').get(j).put('childCatenaXId', cellModuleUuid);\n                \n                \n                var cellmodule_child = apr_cellmodule.get('childParts').get(0);\n                apr_cellmodule.get('childParts').remove(0);\n                \n                var pd_cellmodule = scenario.generateTestData(ProductDescription);\n                var mf_cellmodule = scenario.generateTestData(MaterialForRecycling);\n                \n                for(var k = 0; k < cellQuantity; k++) {\n                    var cellUuid = rand.getUuid();\n                    var cellModuleChild = cloneElement(cellmodule_child);\n                    cellModuleChild.put('childCatenaXId', cellUuid);\n                    apr_cellmodule.get('childParts').put(cellModuleChild);\n                    \n                    var pd_cell = scenario.generateTestData(ProductDescription);\n                    var mf_cell = scenario.generateTestData(MaterialForRecycling);\n                }\n            }\n        }\n}\n")),(0,i.kt)("h3",{id:"vehicle-blueprint"},"Vehicle Blueprint"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-javascript"},'// javascript \n// Name: OEMVehicleTemplate\n// Version: 2.0\n\n// This disables the auto-output of entity-grouped json-elements\n// only the blueprint containers per part will be generated\nscenario.setAutoAddTestdata(false);\n\n// This enables the creation of a test-aas per part from a given aas template version\nscenario.setAutoAddAas("aas", "1.0");\n\n// Thist takes the actual vehicle blueprint template (name, version) and instanciates its content\nscenario.generateFromVehicleTemplate("OEMVehicleTemplate", "2.0");\n\n\n')))}v.isMDXComponent=!0}}]);