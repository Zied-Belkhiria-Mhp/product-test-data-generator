/*
 * Catena-X Speedboat Test Data Generator (TDG)
 * Disclaimer: This service serves synthetic, none-productive data for testing purposes only. All BOMs, part trees, VINs, serialNos etc. are synthetic
 *
 * OpenAPI spec version: 1.0.1-SNAPSHOT
 * Contact: christian.kabelin@partner.bmw.de
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package com.catenax.tdm.client.api;

import java.io.IOException;
import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import com.catenax.tdm.client.ApiCallback;
import com.catenax.tdm.client.ApiClient;
import com.catenax.tdm.client.ApiException;
import com.catenax.tdm.client.ApiResponse;
import com.catenax.tdm.client.Configuration;
import com.catenax.tdm.client.Pair;
import com.catenax.tdm.client.ProgressRequestBody;
import com.catenax.tdm.client.ProgressResponseBody;
import com.catenax.tdm.client.model.TestDataScenario.ScriptTypeEnum;
import com.google.gson.reflect.TypeToken;

public class TestdataScenarioInstanceApi {
    private ApiClient apiClient;

    public TestdataScenarioInstanceApi() {
        this(Configuration.getDefaultApiClient());
    }

    public TestdataScenarioInstanceApi(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return apiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    /**
     * Build call for deleteTestdataScenarioInstanceUsingDELETE
     * @param scenario scenario (required)
     * @param version version (required)
     * @param name name (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call deleteTestdataScenarioInstanceUsingDELETECall(String scenario, String version, String name, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/catena-x/tdm/1.1/testdatascenario/{scenario}/{version}/instance/{name}"
            .replaceAll("\\{" + "scenario" + "\\}", apiClient.escapeString(scenario.toString()))
            .replaceAll("\\{" + "version" + "\\}", apiClient.escapeString(version.toString()))
            .replaceAll("\\{" + "name" + "\\}", apiClient.escapeString(name.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call deleteTestdataScenarioInstanceUsingDELETEValidateBeforeCall(String scenario, String version, String name, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'scenario' is set
        if (scenario == null) {
            throw new ApiException("Missing the required parameter 'scenario' when calling deleteTestdataScenarioInstanceUsingDELETE(Async)");
        }
        // verify the required parameter 'version' is set
        if (version == null) {
            throw new ApiException("Missing the required parameter 'version' when calling deleteTestdataScenarioInstanceUsingDELETE(Async)");
        }
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling deleteTestdataScenarioInstanceUsingDELETE(Async)");
        }
        
        com.squareup.okhttp.Call call = deleteTestdataScenarioInstanceUsingDELETECall(scenario, version, name, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Delete TestData Scenario instance
     * Delete TestData Scenario instance
     * @param scenario scenario (required)
     * @param version version (required)
     * @param name name (required)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Object deleteTestdataScenarioInstanceUsingDELETE(String scenario, String version, String name) throws ApiException {
        ApiResponse<Object> resp = deleteTestdataScenarioInstanceUsingDELETEWithHttpInfo(scenario, version, name);
        return resp.getData();
    }

    /**
     * Delete TestData Scenario instance
     * Delete TestData Scenario instance
     * @param scenario scenario (required)
     * @param version version (required)
     * @param name name (required)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Object> deleteTestdataScenarioInstanceUsingDELETEWithHttpInfo(String scenario, String version, String name) throws ApiException {
        com.squareup.okhttp.Call call = deleteTestdataScenarioInstanceUsingDELETEValidateBeforeCall(scenario, version, name, null, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Delete TestData Scenario instance (asynchronously)
     * Delete TestData Scenario instance
     * @param scenario scenario (required)
     * @param version version (required)
     * @param name name (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call deleteTestdataScenarioInstanceUsingDELETEAsync(String scenario, String version, String name, final ApiCallback<Object> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = deleteTestdataScenarioInstanceUsingDELETEValidateBeforeCall(scenario, version, name, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for instantiateTestdataScenarioRawUsingPOST
     * @param body  (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call instantiateTestdataScenarioRawUsingPOSTCall(ScriptTypeEnum scriptType, String body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;
        
        // create path and map variables
        String localVarPath = "/catena-x/tdm/1.1/testdatascenario/instance/adhoc";
        
        localVarPath += "?scriptType=" + scriptType.toString();

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call instantiateTestdataScenarioRawUsingPOSTValidateBeforeCall(ScriptTypeEnum scriptType, String body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        com.squareup.okhttp.Call call = instantiateTestdataScenarioRawUsingPOSTCall(scriptType, body, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Instantiate TestData Scenario ad hoc
     * Instantiate TestData Scenario ad hoc
     * @param body  (optional)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Object instantiateTestdataScenarioRawUsingPOST(ScriptTypeEnum scriptType, String body) throws ApiException {
        ApiResponse<Object> resp = instantiateTestdataScenarioRawUsingPOSTWithHttpInfo(scriptType, body);
        return resp.getData();
    }

    /**
     * Instantiate TestData Scenario ad hoc
     * Instantiate TestData Scenario ad hoc
     * @param body  (optional)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Object> instantiateTestdataScenarioRawUsingPOSTWithHttpInfo(ScriptTypeEnum scriptType, String body) throws ApiException {
        com.squareup.okhttp.Call call = instantiateTestdataScenarioRawUsingPOSTValidateBeforeCall(scriptType, body, null, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Instantiate TestData Scenario ad hoc (asynchronously)
     * Instantiate TestData Scenario ad hoc
     * @param body  (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call instantiateTestdataScenarioRawUsingPOSTAsync(ScriptTypeEnum scriptType, String body, final ApiCallback<Object> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = instantiateTestdataScenarioRawUsingPOSTValidateBeforeCall(scriptType, body, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for instantiateTestdataScenarioUsingGET
     * @param scenario scenario (required)
     * @param version version (required)
     * @param name name (required)
     * @param overwrite overwrite (required)
     * @param includeGraphQL includeGraphQL (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call instantiateTestdataScenarioUsingGETCall(String scenario, String version, String name, Boolean overwrite, Boolean includeGraphQL, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/catena-x/tdm/1.1/testdatascenario/{scenario}/{version}/instance/{name}"
            .replaceAll("\\{" + "scenario" + "\\}", apiClient.escapeString(scenario.toString()))
            .replaceAll("\\{" + "version" + "\\}", apiClient.escapeString(version.toString()))
            .replaceAll("\\{" + "name" + "\\}", apiClient.escapeString(name.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (overwrite != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("overwrite", overwrite));
        if (includeGraphQL != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("includeGraphQL", includeGraphQL));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call instantiateTestdataScenarioUsingGETValidateBeforeCall(String scenario, String version, String name, Boolean overwrite, Boolean includeGraphQL, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'scenario' is set
        if (scenario == null) {
            throw new ApiException("Missing the required parameter 'scenario' when calling instantiateTestdataScenarioUsingGET(Async)");
        }
        // verify the required parameter 'version' is set
        if (version == null) {
            throw new ApiException("Missing the required parameter 'version' when calling instantiateTestdataScenarioUsingGET(Async)");
        }
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling instantiateTestdataScenarioUsingGET(Async)");
        }
        // verify the required parameter 'overwrite' is set
        if (overwrite == null) {
            throw new ApiException("Missing the required parameter 'overwrite' when calling instantiateTestdataScenarioUsingGET(Async)");
        }
        // verify the required parameter 'includeGraphQL' is set
        if (includeGraphQL == null) {
            throw new ApiException("Missing the required parameter 'includeGraphQL' when calling instantiateTestdataScenarioUsingGET(Async)");
        }
        
        com.squareup.okhttp.Call call = instantiateTestdataScenarioUsingGETCall(scenario, version, name, overwrite, includeGraphQL, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Instantiate or retrieve TestData Scenario
     * Instantiate or retrieve TestData Scenario
     * @param scenario scenario (required)
     * @param version version (required)
     * @param name name (required)
     * @param overwrite overwrite (required)
     * @param includeGraphQL includeGraphQL (required)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Object instantiateTestdataScenarioUsingGET(String scenario, String version, String name, Boolean overwrite, Boolean includeGraphQL) throws ApiException {
        ApiResponse<Object> resp = instantiateTestdataScenarioUsingGETWithHttpInfo(scenario, version, name, overwrite, includeGraphQL);
        return resp.getData();
    }

    /**
     * Instantiate or retrieve TestData Scenario
     * Instantiate or retrieve TestData Scenario
     * @param scenario scenario (required)
     * @param version version (required)
     * @param name name (required)
     * @param overwrite overwrite (required)
     * @param includeGraphQL includeGraphQL (required)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Object> instantiateTestdataScenarioUsingGETWithHttpInfo(String scenario, String version, String name, Boolean overwrite, Boolean includeGraphQL) throws ApiException {
        com.squareup.okhttp.Call call = instantiateTestdataScenarioUsingGETValidateBeforeCall(scenario, version, name, overwrite, includeGraphQL, null, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Instantiate or retrieve TestData Scenario (asynchronously)
     * Instantiate or retrieve TestData Scenario
     * @param scenario scenario (required)
     * @param version version (required)
     * @param name name (required)
     * @param overwrite overwrite (required)
     * @param includeGraphQL includeGraphQL (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call instantiateTestdataScenarioUsingGETAsync(String scenario, String version, String name, Boolean overwrite, Boolean includeGraphQL, final ApiCallback<Object> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = instantiateTestdataScenarioUsingGETValidateBeforeCall(scenario, version, name, overwrite, includeGraphQL, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for listTestdataScenarioInstancesUsingGET
     * @param scenario scenario (required)
     * @param version version (required)
     * @param name name (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call listTestdataScenarioInstancesUsingGETCall(String scenario, String version, String name, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/catena-x/tdm/1.1/testdatascenario/instance/list";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (scenario != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("scenario", scenario));
        if (version != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("version", version));
        if (name != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("name", name));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call listTestdataScenarioInstancesUsingGETValidateBeforeCall(String scenario, String version, String name, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'scenario' is set
        if (scenario == null) {
            throw new ApiException("Missing the required parameter 'scenario' when calling listTestdataScenarioInstancesUsingGET(Async)");
        }
        // verify the required parameter 'version' is set
        if (version == null) {
            throw new ApiException("Missing the required parameter 'version' when calling listTestdataScenarioInstancesUsingGET(Async)");
        }
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling listTestdataScenarioInstancesUsingGET(Async)");
        }
        
        com.squareup.okhttp.Call call = listTestdataScenarioInstancesUsingGETCall(scenario, version, name, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * List TestData Scenario instances
     * List TestData Scenario instances
     * @param scenario scenario (required)
     * @param version version (required)
     * @param name name (required)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Object listTestdataScenarioInstancesUsingGET(String scenario, String version, String name) throws ApiException {
        ApiResponse<Object> resp = listTestdataScenarioInstancesUsingGETWithHttpInfo(scenario, version, name);
        return resp.getData();
    }

    /**
     * List TestData Scenario instances
     * List TestData Scenario instances
     * @param scenario scenario (required)
     * @param version version (required)
     * @param name name (required)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Object> listTestdataScenarioInstancesUsingGETWithHttpInfo(String scenario, String version, String name) throws ApiException {
        com.squareup.okhttp.Call call = listTestdataScenarioInstancesUsingGETValidateBeforeCall(scenario, version, name, null, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * List TestData Scenario instances (asynchronously)
     * List TestData Scenario instances
     * @param scenario scenario (required)
     * @param version version (required)
     * @param name name (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call listTestdataScenarioInstancesUsingGETAsync(String scenario, String version, String name, final ApiCallback<Object> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = listTestdataScenarioInstancesUsingGETValidateBeforeCall(scenario, version, name, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for queryTestdataScenarioInstancesUsingGET
     * @param scenario scenario (required)
     * @param version version (required)
     * @param name name (required)
     * @param query query (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call queryTestdataScenarioInstancesUsingGETCall(String scenario, String version, String name, String query, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/catena-x/tdm/1.1/testdatascenario/instance/query";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (scenario != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("scenario", scenario));
        if (version != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("version", version));
        if (name != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("name", name));
        if (query != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("query", query));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call queryTestdataScenarioInstancesUsingGETValidateBeforeCall(String scenario, String version, String name, String query, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'scenario' is set
        if (scenario == null) {
            throw new ApiException("Missing the required parameter 'scenario' when calling queryTestdataScenarioInstancesUsingGET(Async)");
        }
        // verify the required parameter 'version' is set
        if (version == null) {
            throw new ApiException("Missing the required parameter 'version' when calling queryTestdataScenarioInstancesUsingGET(Async)");
        }
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling queryTestdataScenarioInstancesUsingGET(Async)");
        }
        // verify the required parameter 'query' is set
        if (query == null) {
            throw new ApiException("Missing the required parameter 'query' when calling queryTestdataScenarioInstancesUsingGET(Async)");
        }
        
        com.squareup.okhttp.Call call = queryTestdataScenarioInstancesUsingGETCall(scenario, version, name, query, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Query TestData Scenario instance
     * Query TestData Scenario instance
     * @param scenario scenario (required)
     * @param version version (required)
     * @param name name (required)
     * @param query query (required)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Object queryTestdataScenarioInstancesUsingGET(String scenario, String version, String name, String query) throws ApiException {
        ApiResponse<Object> resp = queryTestdataScenarioInstancesUsingGETWithHttpInfo(scenario, version, name, query);
        return resp.getData();
    }

    /**
     * Query TestData Scenario instance
     * Query TestData Scenario instance
     * @param scenario scenario (required)
     * @param version version (required)
     * @param name name (required)
     * @param query query (required)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Object> queryTestdataScenarioInstancesUsingGETWithHttpInfo(String scenario, String version, String name, String query) throws ApiException {
        com.squareup.okhttp.Call call = queryTestdataScenarioInstancesUsingGETValidateBeforeCall(scenario, version, name, query, null, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Query TestData Scenario instance (asynchronously)
     * Query TestData Scenario instance
     * @param scenario scenario (required)
     * @param version version (required)
     * @param name name (required)
     * @param query query (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call queryTestdataScenarioInstancesUsingGETAsync(String scenario, String version, String name, String query, final ApiCallback<Object> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = queryTestdataScenarioInstancesUsingGETValidateBeforeCall(scenario, version, name, query, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
}
