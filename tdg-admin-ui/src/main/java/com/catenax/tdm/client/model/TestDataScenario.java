/*
 * Catena-X Speedboat Test Data Generator (TDG)
 * Disclaimer: This service serves synthetic, none-productive data for testing purposes only. All BOMs, part trees, VINs, serialNos etc. are synthetic
 *
 * OpenAPI spec version: 1.0.1-SNAPSHOT
 * Contact: christian.kabelin@partner.bmw.de
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package com.catenax.tdm.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.v3.oas.annotations.media.Schema;
import java.io.IOException;
/**
 * TestDataScenario
 */

@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.JavaClientCodegen", date = "2022-01-25T13:02:41.126Z[GMT]")
public class TestDataScenario {
  @SerializedName("content")
  private String content = null;

  @SerializedName("name")
  private String name = null;

  /**
   * Gets or Sets scriptStatus
   */
  @JsonAdapter(ScriptStatusEnum.Adapter.class)
  public enum ScriptStatusEnum {
    DECOMISSIONED("DECOMISSIONED"),
    DRAFT("DRAFT"),
    PRODUCTIVE("PRODUCTIVE");

    private String value;

    ScriptStatusEnum(String value) {
      this.value = value;
    }
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }
    public static ScriptStatusEnum fromValue(String input) {
      for (ScriptStatusEnum b : ScriptStatusEnum.values()) {
        if (b.value.equals(input)) {
          return b;
        }
      }
      return null;
    }
    public static class Adapter extends TypeAdapter<ScriptStatusEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final ScriptStatusEnum enumeration) throws IOException {
        jsonWriter.value(String.valueOf(enumeration.getValue()));
      }

      @Override
      public ScriptStatusEnum read(final JsonReader jsonReader) throws IOException {
        Object value = jsonReader.nextString();
        return ScriptStatusEnum.fromValue((String)(value));
      }
    }
  }  @SerializedName("scriptStatus")
  private ScriptStatusEnum scriptStatus = null;

  /**
   * Gets or Sets scriptType
   */
  @JsonAdapter(ScriptTypeEnum.Adapter.class)
  public enum ScriptTypeEnum {
    DSL("DSL"),
    JAVASCRIPT("JavaScript");

    private String value;

    ScriptTypeEnum(String value) {
      this.value = value;
    }
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }
    public static ScriptTypeEnum fromValue(String input) {
      for (ScriptTypeEnum b : ScriptTypeEnum.values()) {
        if (b.value.equals(input)) {
          return b;
        }
      }
      return null;
    }
    public static class Adapter extends TypeAdapter<ScriptTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final ScriptTypeEnum enumeration) throws IOException {
        jsonWriter.value(String.valueOf(enumeration.getValue()));
      }

      @Override
      public ScriptTypeEnum read(final JsonReader jsonReader) throws IOException {
        Object value = jsonReader.nextString();
        return ScriptTypeEnum.fromValue((String)(value));
      }
    }
  }  @SerializedName("scriptType")
  private ScriptTypeEnum scriptType = null;

  @SerializedName("version")
  private String version = null;

  public TestDataScenario content(String content) {
    this.content = content;
    return this;
  }

   /**
   * Get content
   * @return content
  **/
  @Schema(description = "")
  public String getContent() {
    return content;
  }

  public void setContent(String content) {
    this.content = content;
  }

  public TestDataScenario name(String name) {
    this.name = name;
    return this;
  }

   /**
   * Get name
   * @return name
  **/
  @Schema(description = "")
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }

  public TestDataScenario scriptStatus(ScriptStatusEnum scriptStatus) {
    this.scriptStatus = scriptStatus;
    return this;
  }

   /**
   * Get scriptStatus
   * @return scriptStatus
  **/
  @Schema(description = "")
  public ScriptStatusEnum getScriptStatus() {
    return scriptStatus;
  }

  public void setScriptStatus(ScriptStatusEnum scriptStatus) {
    this.scriptStatus = scriptStatus;
  }

  public TestDataScenario scriptType(ScriptTypeEnum scriptType) {
    this.scriptType = scriptType;
    return this;
  }

   /**
   * Get scriptType
   * @return scriptType
  **/
  @Schema(description = "")
  public ScriptTypeEnum getScriptType() {
    return scriptType;
  }

  public void setScriptType(ScriptTypeEnum scriptType) {
    this.scriptType = scriptType;
  }

  public TestDataScenario version(String version) {
    this.version = version;
    return this;
  }

   /**
   * Get version
   * @return version
  **/
  @Schema(description = "")
  public String getVersion() {
    return version;
  }

  public void setVersion(String version) {
    this.version = version;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    TestDataScenario testDataScenario = (TestDataScenario) o;
    return Objects.equals(this.content, testDataScenario.content) &&
        Objects.equals(this.name, testDataScenario.name) &&
        Objects.equals(this.scriptStatus, testDataScenario.scriptStatus) &&
        Objects.equals(this.scriptType, testDataScenario.scriptType) &&
        Objects.equals(this.version, testDataScenario.version);
  }

  @Override
  public int hashCode() {
    return Objects.hash(content, name, scriptStatus, scriptType, version);
  }


  @Override
  public String toString() {
    return this.getName() + " (v" + this.getVersion() + ")";
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
